<UserControl x:Name="LayoutPreviewControl"
             x:Class="WindSlicer.Controls.LayoutPreview"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WindSlicer.Controls"
             xmlns:models="clr-namespace:WindSlicer.Models"
             xmlns:controls="clr-namespace:WindSlicer.Controls"
             xmlns:ext="clr-namespace:WindSlicer.Utilities.Extensions"
             xmlns:converters="clr-namespace:WindSlicer.Utilities.Converters"
             xmlns:util="clr-namespace:WindSlicer.Utilities"
             xmlns:services="clr-namespace:WindSlicer.Services"
             xmlns:debug="clr-namespace:System.Diagnostics;assembly=System"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Loaded="LayoutPreviewControl_Loaded"
             DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <UserControl.Resources>
        <util:BindingProxy x:Key="Proxy" Data="{Binding}"/>
        <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
        <converters:NotNullConverter x:Key="NotNullConverter"/>
        <converters:ScreenNameConverter x:Key="ScreenNameConverter"/>
        <converters:RelativeSizeConverter x:Key="RelativeSizeConverter"/>
        <converters:PercentConverter x:Key="PercentConverter"/>
        <converters:PixelConverter x:Key="PixelConverter"
                                   Width="{Binding Data.SelectedScreen.WorkingArea.Width, Source={StaticResource Proxy}}"
                                   Height="{Binding Data.SelectedScreen.WorkingArea.Height, Source={StaticResource Proxy}}"/>
        <converters:RoutingConverter x:Key="PixelPercentConverter"
                                     Condition="{Binding Data.UsePixels, Source={StaticResource Proxy}}"
                                     TrueConverter="{StaticResource PixelConverter}"
                                     FalseConverter="{StaticResource PercentConverter}"/>
        <Style x:Key="ValidatingControl"
               TargetType="{x:Type FrameworkElement}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip"
                            Value="{Binding Path=(Validation.Errors)[0].ErrorContent,
                                    RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle"
               TargetType="{x:Type Button}">
            <Setter Property="Padding" Value="8, 4, 8, 4"/>
            <Setter Property="Margin" Value="0, 8, 8, 8"/>
            <Setter Property="VerticalAlignment" Value="Bottom"/>
        </Style>
        <Style x:Key="InputField"
               BasedOn="{StaticResource ValidatingControl}"
               TargetType="{x:Type TextBox}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="{Binding SelectedArea, Converter={StaticResource NotNullConverter}}"/>
        </Style>
        <Style x:Key="InputLabel"
               TargetType="{x:Type Label}">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="UnitLabel"
               TargetType="{x:Type Label}"
               BasedOn="{StaticResource InputLabel}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Content" Value="%"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding UsePixels}" Value="True">
                    <Setter Property="Content" Value="px"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TaskBarStyle"
               TargetType="{x:Type Canvas}">
            <Setter Property="Background" Value="Navy"/>
            <Setter Property="Visibility" Value="{Binding ShowTaskbar, Converter={StaticResource BoolToVisConverter}}"/>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border Grid.Column="0"
                Grid.RowSpan="2"
                Margin="8,8,0,8"
                BorderThickness="0"
                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}">
            <!--Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"-->
            <!--Preview container-->
            <Viewbox Stretch="Uniform"
                     HorizontalAlignment="Stretch">
                <DockPanel LastChildFill="True">
                    <Canvas x:Name="TaskBarLeft"
                            Style="{StaticResource TaskBarStyle}"
                            Height="{Binding Height, ElementName=Container}"
                            DockPanel.Dock="Left"/>
                    <Canvas x:Name="TaskBarRight"
                            Style="{StaticResource TaskBarStyle}"
                            DockPanel.Dock="Right"
                            Height="{Binding Height, ElementName=Container}"
                            HorizontalAlignment="Right"/>
                    <Canvas x:Name="TaskBarTop"
                            Style="{StaticResource TaskBarStyle}"
                            Width="{Binding Width, ElementName=Container}"
                            DockPanel.Dock="Top"/>
                    <Canvas x:Name="TaskBarBottom"
                            Style="{StaticResource TaskBarStyle}"
                            Width="{Binding Width, ElementName=Container}"
                            DockPanel.Dock="Bottom"/>
                    <Canvas x:Name="Container"
                        Background="BlanchedAlmond"
                        SnapsToDevicePixels="True"
                        Width="{Binding SelectedScreen.WorkingArea.Width}"
                        Height="{Binding SelectedScreen.WorkingArea.Height}"/>
                </DockPanel>
            </Viewbox>
        </Border>
        <StackPanel x:Name="FormContainer"
                Grid.Column="1"
                Grid.Row="0"
                Margin="8">
            <CheckBox HorizontalAlignment="Center"
                      VerticalContentAlignment="Center"
                      IsChecked="{Binding UsePixels}">
                <Label Content="{ext:Display UsePixels, {x:Type local:LayoutPreview}}"/>
            </CheckBox>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <!--X-->
                <Label Grid.Row="0"
                       Grid.Column="0"
                       Style="{StaticResource InputLabel}"
                       Content="{ext:Display X, {x:Type models:SnapAreaModel}}"/>
                <TextBox x:Name="InputX"
                         Grid.Row="0"
                         Grid.Column="1"
                         Style="{StaticResource InputField}"
                         Text="{Binding SelectedArea.X,
                                Converter={StaticResource PixelPercentConverter},
                                Mode=TwoWay,
                                ConverterParameter='Width',
                                ValidatesOnDataErrors=True}"/>
                <Label Grid.Row="0"
                       Grid.Column="2"
                       Style="{StaticResource UnitLabel}"/>
                <!--Y-->
                <Label Grid.Row="1"
                       Grid.Column="0"
                       Style="{StaticResource InputLabel}"
                       Content="{ext:Display Y, {x:Type models:SnapAreaModel}}"/>
                <TextBox x:Name="InputY"
                         Grid.Row="1"
                         Grid.Column="1"
                         Style="{StaticResource InputField}"
                         Text="{Binding SelectedArea.Y,
                                Converter={StaticResource PixelPercentConverter},
                                Mode=TwoWay,
                                ConverterParameter='Height',
                                ValidatesOnDataErrors=True}"/>
                <Label Grid.Row="1"
                       Grid.Column="2"
                       Style="{StaticResource UnitLabel}"/>
                <!--Width-->
                <Label Grid.Row="2"
                       Grid.Column="0"
                       Style="{StaticResource InputLabel}"
                       Content="{ext:Display Width, {x:Type models:SnapAreaModel}}"/>
                <TextBox x:Name="InputWidth"
                         Grid.Row="2"
                         Grid.Column="1"
                         Style="{StaticResource InputField}"
                         Text="{Binding SelectedArea.Width,
                                Converter={StaticResource PixelPercentConverter},
                                Mode=TwoWay,
                                ConverterParameter='Width',
                                ValidatesOnDataErrors=True}"/>
                <Label Grid.Row="2"
                       Grid.Column="2"
                       Style="{StaticResource UnitLabel}"/>
                <!--Height-->
                <Label Grid.Row="3"
                       Grid.Column="0"
                       Style="{StaticResource InputLabel}"
                       Content="{ext:Display Height, {x:Type models:SnapAreaModel}}"/>
                <TextBox x:Name="InputHeight"
                         Grid.Row="3"
                         Grid.Column="1"
                         Style="{StaticResource InputField}"
                         Text="{Binding SelectedArea.Height,
                                Converter={StaticResource PixelPercentConverter},
                                Mode=TwoWay,
                                ConverterParameter='Height',
                                ValidatesOnDataErrors=True}"/>
                <Label Grid.Row="3"
                       Grid.Column="2"
                       Style="{StaticResource UnitLabel}"/>
                <!--Button-->
                <Button x:Name="UpdateButton"
                        Grid.Row="4"
                        Grid.Column="1"
                        Style="{StaticResource ButtonStyle}"
                        IsEnabled="{Binding SelectedArea, Converter={StaticResource NotNullConverter}}"
                        Click="UpdateButton_Click"
                        Content="Update"/>
            </Grid>
        </StackPanel>
        <ListBox x:Name="ItemListBox"
                 Grid.Column="1"
                 Grid.Row="1"
                 ItemsSource="{Binding Model.Areas}"
                 SelectedItem="{Binding Path=SelectedArea, Mode=TwoWay}"
                 DisplayMemberPath="DisplayString"
                 Margin="8"
                 MinWidth="160">
        </ListBox>
        <StackPanel Grid.Row="3"
                   Grid.Column="0"
                   Margin="8,0,8,8"
                   VerticalAlignment="Center">
            <CheckBox VerticalContentAlignment="Center"
                      IsChecked="{Binding ShowTaskbar}">
                <Label Content="{ext:Display ShowTaskbar, {x:Type local:LayoutPreview}}"/>
            </CheckBox>
            <ComboBox ItemsSource="{Binding ScreenList}"
                     SelectedItem="{Binding SelectedScreen, Mode=TwoWay}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=., Converter={StaticResource ScreenNameConverter}}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
        <DockPanel Grid.Row="3"
                   Grid.Column="1"
                   LastChildFill="False">
            <Button DockPanel.Dock="Right"
                    Style="{StaticResource ButtonStyle}">Cancel</Button>
            <Button DockPanel.Dock="Right"
                    Style="{StaticResource ButtonStyle}">OK</Button>
        </DockPanel>
    </Grid>
</UserControl>
